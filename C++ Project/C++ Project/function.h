#pragma once
#include "common.h"

int Add(int a, int b);
int Mul(int a, int b);
int Sub(int a, int b);

// 분할 구현 왜 하는가? : 코드를 손쉽게 관리하기 위해서 ( 누가 ? 사람이 작업 할 떄 )
// 분할 구현을 하면 속도가 저하되기 때문에, 규칙을 정해서 속도를 올리기 위하는 작업도 있따.
// 소스파일 메인보다 함수가 아래에 위치하면 컴파일 에러가 발생한다.
// 코드가 길어지면 아래에 정리하는 것이 가독성이 좋기 때문에 선언만 미리할 수 있다.
// 링크 단계에서 함수를 연결한다.
// 함수를 선언만 하고 사용하지 않을 때 LNK 오류가 발생한다 
// LNK : 링크 단계에서 발생하는 오류
// C~~ : 컴파일 에러, 문법에서 오류가 있다.

// 헤더에 직접 코드를 구현하면 무슨 문제가 생길까?
// #include 할 떄 마다 코드가 구현된 부분이 복사 붙여넣기 되서 중복 함수가 생긴다! 에러가 발생한다
// 그렇기 때문에 선언만 하는 것이다.

// 전역 변수의 장점이 없어진다.
// 컴파일러는 해당 문서의 문법만 체크하기 때문에 전역 변수가 있음에도 있는지 모른다.
// 문법적으로 전역 변수를 인식시키기가 어렵네? 다른 방법이 없을까?
// 외부 변수에 대한 개념을 알아야 한다.

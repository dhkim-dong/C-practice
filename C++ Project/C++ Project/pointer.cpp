#include <stdio.h>
#include <stdlib.h>

int main() 
{
	// 포인터 변수
	// 자료형 변수명
	int* pint = nullptr;

	// 주소에 접근했을 때의 메모리 공간에 선언한 데이터 타입으로 보겠다.

	char* pChar = nullptr;
	short* pShort = nullptr;

	// 포인터 변수의 크기가 같을까 다를까? 모두 같다.
	// 크기가 얼마나 될까? 플랫폼에 따라 크기가 달라진다.
	// OS의 비트수에 대한 이해
	// 32bit 운영체제 , 64bit 운영체제
	// 한번에 처리하는 기본 단위
	// 4바이트, 8바이트 주소의 크기로 정해진다.
	// 주소의 크기가 작으면 어떤 문제가 있나요?
	// 주소의 크기보다 큰 RAM에 접근을 할 수 없다. ( 메모리가 많이 확보해야 하는데, OS의 한계 때문에 더 많은 메모리에 접근을 못한다. 따라서 64비트를 사용한다)

	int iSize = sizeof(int*);

	int i = 0;
	pint = & i;
	pint += 1;
	// 주소의 연산의 의미? ( 자료형 사이즈 크기에 맞게 증가한다)
	// pint는 자신의 주소값의 데이터형을 int로 본다.
	// 그런 친구한테 주소를 1개 증가시켜라
	// 다음 int 위치를 가르키겠다. (실제로는 다음 위치에 아무것도 없다.)

	// 포인터와 배열
	// 메모리가 연속적인 구조이다.
	// 배열의 이름은 배열의 시작 주소이다.
	int iArr[10] = {}; 

	*(iArr + 0) = 10; // 배열 시작이 0인 이유 , iArr[0] = 10; 꺽새 연산자의 의미가 해당 포인터의 0번 째에 10이라는 데이터를 넣어라는 의미이다.
	*(iArr + 1) = 10; // 배열 시작의 +1 주소에 10이라는 데이터를 넣어라.

	//int(&iArr2)[10] = iArr;

	

	return 0;
}